listen:
  hostname: '127.0.0.1'
  port: 9000

# Correspond to your reverse proxy "listen" configuration
webserver:
  https: true
  hostname: '{{ peertube_domain }}'
  port: '{{ peertube_port }}'

# Proxies to trust to get real client IP
# If you run PeerTube just behind a local proxy (nginx), keep 'loopback'
# If you run PeerTube behind a remote proxy, add the proxy IP address (or subnet)
trust_proxy:
  - 'loopback'

# Your database name will be "peertube"+database.suffix
database:
  hostname: '{{ peertube_database_hostname }}'
  port: '{{ peertube_database_port }}'
  ssl: false
  suffix: '{{ peertube_database_suffix }}'
  username: '{{ peertube_database_username }}'
  password: '{{ peertube_database_password }}'
  pool:
    max: 5

# Redis server for short time storage
redis:
  hostname: 'localhost'
  port: 6379
  auth: null

# SMTP server to send emails
smtp:
  hostname: "{{ peertube_smtp_hostname }}"
  port: "{{ peertube_smtp_port }}"
  username: "{{ peertube_smtp_username }}"
  password: "{{ peertube_smtp_password }}"
  tls: "{{ peertube_smtp_tls }}"
  disable_starttls: "{{ peertube_smtp_disable_starttls }}"
  ca_file: "{{ peertube_smtp_ca_file }}"
  from_address: "{{ peertube_smtp_from_address }}"

email:
  body:
    signature: "PeerTube"
  subject:
    prefix: "[PeerTube]"

# From the project root directory
storage:
  tmp: 'storage/tmp/' # Use to download data (imports etc), store uploaded files before and during processing...
  avatars: 'storage/avatars/'
  videos: 'storage/videos/'
  streaming_playlists: 'storage/streaming-playlists/'
  redundancy: 'storage/redundancy/'
  logs: 'storage/logs/'
  previews: 'storage/previews/'
  thumbnails: 'storage/thumbnails/'
  torrents: 'storage/torrents/'
  captions: 'storage/captions/'
  cache: 'storage/cache/'
  plugins: 'storage/plugins/'
  # Overridable client files : logo.svg, favicon.png and icons/*.png (PWA) in client/dist/assets/images
  # Could contain for example assets/images/favicon.png
  # If the file exists, peertube will serve it
  # If not, peertube will fallback to the default fil
  client_overrides: 'storage/client-overrides/'

object_storage:
  enabled: false

  # Without protocol, will default to HTTPS
  endpoint: '' # 's3.amazonaws.com' or 's3.fr-par.scw.cloud' for example

  region: 'us-east-1'

  credentials:
    # You can also use AWS_ACCESS_KEY_ID env variable
    access_key_id: ''
    # You can also use AWS_SECRET_ACCESS_KEY env variable
    secret_access_key: ''

  # Maximum amount to upload in one request to object storage
  max_upload_part: 2GB

  streaming_playlists:
    bucket_name: 'streaming-playlists'

    # Allows setting all buckets to the same value but with a different prefix
    prefix: '' # Example: 'streaming-playlists:'

    # Base url for object URL generation, scheme and host will be replaced by this URL
    # Useful when you want to use a CDN/external proxy
    base_url: '' # Example: 'https://mirror.example.com'

  # Same settings but for webtorrent videos
  videos:
    bucket_name: 'videos'
    prefix: ''
    base_url: ''


log:
  level: 'info' # debug/info/warning/error


###############################################################################
#
# From this point, all the following keys can be overridden by the web interface
# (local-production.json file). If you need to change some values, prefer to
# use the web interface because the configuration will be automatically
# reloaded without any need to restart PeerTube.
#
# /!\ If you already have a local-production.json file, the modification of the
# following keys will have no effect /!\.
#
###############################################################################

cache:
  previews:
    size: 100 # Max number of previews you want to cache

admin:
  email: '{{ peertube_admin_email }}'

signup:
  enabled: false
  limit: 10 # When the limit is reached, registrations are disabled. -1 == unlimited

user:
  # Default value of maximum video BYTES the user can upload (does not take into account transcoded files).
  # -1 == unlimited
  video_quota: -1

# If enabled, the video will be transcoded to mp4 (x264) with "faststart" flag
# Uses a lot of CPU!
transcoding:
  enabled: true
  threads: 1
  resolutions: # Only created if the original video has a higher resolution
    240p: false
    360p: false
    480p: false
    720p: false
    1080p: false

# Instance settings
instance:
  name: '{{ peertube_instance_name }}'
  short_description: '{{ peertube_instance_short_description }}'
  description: '{{ peertube_instance_description }}'
  terms: '{{ peertube_instance_terms }}'
  default_client_route: '/videos/trending'
  # By default, "do_not_list" or "blur" or "display" NSFW videos
  # Could be overridden per user with a setting
  default_nsfw_policy: 'do_not_list'
  customizations:
    javascript: '' # Directly your JavaScript code (without <script> tags). Will be eval at runtime
    css: '' # Directly your CSS code (without <style> tags). Will be injected at runtime
  # Robot.txt rules. To allow robots to crawl your instance and allow indexation of your site, remove the '/'
  robots: |
    User-agent: *
    Disallow: /

services:
  # Cards configuration to format video in Twitter
  twitter:
    username: '{{ peertube_services_twitter_username }}'
    # If true, a video player will be embedded in the Twitter feed on PeerTube video share
    # If false, we use an image link card that will redirect on your PeerTube instance
    # Test on https://cards-dev.twitter.com/validator to see if you are whitelisted
    whitelisted: "{{ peertube_services_twitter_whitelisted }}"
